@charset "UTF-8";

@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap');

/*
O arquivo "style.css" está dentro da pasta "estilo" na pasta "desafio d010a". Então, toda vez
que eu for solicitar a abertura de uma pasta fora estilo, eu preciso colocar "../". No arquivo 
"android.html" eu não precisei fazer isso porque ele está na pasta "d010a" no mesmo nível das
outras pastas. Então eu não preciso sair de uma pasta. Eu preciso apenas entrar em uma pasta. 

O código "../" quer dizer volte uma pasta.
O código "../fontes/android.otf'" quer dizer: Volte uma pasta, abra a pasta "fontes" e abra
o arquivo "android.otf"*/
@font-face {
    font-family: Android;
    src: url('../fontes/android.otf'); format('opentype')
    font-weight: normal;
}

/* É uma pseudoclasse que todo documento tem. É a raiz da árvore do nosso documento. 
Tudo que for definido na pseudoclasse ":root" vai servir pro documento inteiro. 
É possível criar variáveis nessa pseudoclasse. 
*/

/* Configuração global para selecionar todos os elementos de HTML e estilizar para que nenhum 
bloco tenha margem e padding. Ao invés de eu identificar cada elemento HTML, um por um, eu posso 
criar um seletor com "asterisco" (*). Dessa forma eu estou fazendo uma configuração global.   
*/

* {
    margin: 0px;
    padding: 0px;
}

:root {
    --cor0:#c5ebd6;
    --cor1:#83e1ad;
    --cor2:#3ddc84;
    --cor3:#2fa866;
    --cor4:#1a5c37;
    --cor5:#063d1e;

    --fonte-padrao: Arial, Verdana, Helvetica, sans-serif;
    --fonte-destaque: "Bebas Neue", sans-serif;
    --fonte-android: 'Android', sans-serif;
}

body {
    background-color: var(--cor0);
    font-family: var(--fonte-padrao);
}

/*
Nessa configuração, eu quero que todos os links que forem da classe externo (class="externo") eu vou colocar depois dele (::after)
um conteudo (content) que será o símbolo de link. 
*/
a.externo::after {
    content: '\00A0\1F517';
}

header {
    background-image: linear-gradient(to bottom, var(--cor3), var(--cor5));
    min-height: 150px;
    text-align: center;
    /*
    Eu quero que meu "h1" se afaste um pouco da margem de cima. Porém, se eu configurar o "margin-top" do "h1" ele vai vazar pra cima. Então eu devo 
    configurar o "padding-top" do header 
    */
    padding-top: 40px;
}
/* Posso ler assim: Dentro do "header" eu tenho um <h1>
Vai estilizar o elemento (<h1>) que é filho direto na hierarquia (aninhado logo depois do <header>).*/ 
header > h1 {
    color: white;
    font-family: var(--fonte-destaque);
    font-size: 3em;
    font-weight: normal;
    margin-bottom: 20px;
    text-shadow: 2px 2px 0px rgba(0, 0, 0, 0.267);
}

header > p {
    color: white;
    font-family: var(--fonte-padrao);
    font-size: 1.2em;
    text-shadow: 2px 2px 0px rgba(0, 0, 0, 0.315);
    /*
    O "max-width" de 600px significa que se a tela tiver mais de 600px de largura, ele se mantém com 600px. Se ela tiver menos de 600px, o conteúdo se adapta. 
    */
    max-width: 600px;
    padding-right: 10px;
    padding-left: 10px;
    padding-bottom: 30px;
    margin: auto;
}

nav {
    background-color: var(--cor5);
    padding: 10px;
    box-shadow: 0px 7px 7px rgba(0, 0, 0, 0.192);
}

nav > a {
    color: var(--cor1);
    padding: 10px;
    text-decoration: none;
    font-weight: bold;
    
}

nav > a:hover {
    background-color: var(--cor3);
    color: var(--cor5);
    border-radius: 5px;
    /*
    O "transition-duration" quer dizer que quando mexer o mouse em cima, ele vai levar 1 segundo de transição. 
    */
    transition-duration: .5s;
}


main {
    background-color: white;
/* O min-widht significa que o CONTEUDO do "main" só vai diminuir até um tamanho mínimo de 280px. Se a tela for menor do que isso ele não diminui mais; 
O "max-width" significa que o tamanho máximo que conteúdo do "main" vai ocupar, mesmo em uma tela gigante é 800px. Acima disso a imagem pernace normal e abaixo disso o conteúdo não se adapta mais.

Como configuramos o <main>, a estilização não vai ser aplicada as imagens. É preciso fazer, também, a configuração das imagens*/
    max-width: 1000px;
    min-width: 300px;
/*
Enquanto o 'margin" auto centraliza a imagem, eu posso adicionar, também, um "margin-bottom" para criar um espaço entre o "main" e o "rodapé". 
*/
    margin: auto;
    margin-bottom: 30px;
    padding: 20px;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
/*
Para configurar uma sobra ao redor de todo o "main", eu vou colocar "0px 0px" pra não ter um deslocamento nem lateral nem vertical. Vou colocar, também, um espalhamento
de 10px black. Esse "black" vai gerar uma sombra muito forte. Então eu coloco uma transparência de 50% mais ou menos. 
*/
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.493);
}

/* Quando tem mais de 1 elemento que é filho, se fala assim: No meu "main" toda <img> que tiver.... Mesmo que tenha apenas 1 elemento
Nesse caso, a <img> será estilizada independente do nível de profundidade. Ele pode ser um elemento imediato (está aninhado logo depois 
do main), ou pode estar ainda mais profundo no aninhamento, como esta dentro de uma <div> que está dentro do <main>, por exemplo. */ 

/*Quer dizer que as minhas imagens vão ter a largura, independente do conteúdo, de 100% da largura da viewport. Isso vai fazer com que as imagens se expremam e se adaptem*/

main img {
    /*
        No código abaixo, o "max=width" quer dizer que quando a "viewport" chegar em 500px, ele vai carregar a imagem definida em 
        "srcset'. É o ponto de quebra. O limite em que a imagem será exibida. Menos do que isso ela muda para uma menor. 
        
        <source media="(max-width: 500px)" srcset="imagens/irina-blok-pq.jpg">
        <img src="imagens/irina-blok.jpg" alt="Irina Blok, criadora do Bugdroid">
    */
    width: 100%;
}

/*
A imagem do Android, já é pequena. Então a exibição dela na página fica muito grande, ainda mais que foi configurado a largura "width" da imagem para 100%.
Para resolver isso, podemos criar uma classe para essa imagem e configurar a largura dessa imagem para 50%. 

Além disso, as imagens, por padrão, não são exibidas como blocos. Então para eu centralizar a imagem, além de colocar o "margin=*auto"*, eu preciso, também, 
configurar a exibição da imagem como "bloco" (display="block""). 
*/
main img.pequena {
    
    max-width: 350px;
    margin: auto;
    display: block;
/*
Essa imagem tem uma largura de 400px. Então, quando a tela fica pequena a imagem se ajusta e fica pequena e quanto a tela fica cheia a imagem começa a embaçar. 
Para resolver isso eu vou fazer a imagem crescer até 350px. 
Quando a tela estiver muito pequena a imagem pode diminuir, mas quando a tela estiver com mais de 350px a imagem vai se manter com largura máxima de 350px pra manter uma resolução legal. 
*/
}

main h1 {
    color: var(--cor5);
    font-family: var(--fonte-android);
    font-weight: normal;
    font-size: 1.8em;
}

main h2 {
    font-family: var(--fonte-android);
    color: var(--cor4);
    font-size: 1.3em;
    font-weight: normal;
    background-image: linear-gradient(to right, var(--cor1), transparent);
    text-indent: 8px;
}

main p {
    /*
    Quando eu coloquei nas configurações globais um "margin: 0px" e um "padding: 0px" eu tirei uma margem que normalmente os parágrafos têm. 
    Os parágrafos normalmente tÊm 4 margens (cima, direita, baixo e esquerda). 
    Eu posso configurar colocando caca margem individualmente (15px 0px 15px 0 px) ou posso resumir configurando as margens superior e inferior e direita e esquerda 
    (15px 0px). 
    */  
    
    margin: 15px 0px;
    text-align: justify;
    text-indent: 30px;
    /*
    "line-height" é o espaçamento entre linhas. "1em" significa que não tem espaço entre as linhas. 
    */
    font-size: 1em;
    line-height: 2em;
   }

/*
Aqui será configurado tudo que for "strong" que estiver dentro do "main". 
*/
main strong {
    color: var(--cor4);
    font-weight: bold;
    text-shadow: ;
}

main a {
    text-decoration: none;
    font-weight: bold;
    color: var(--cor5);
    background-color: var(--cor1);
    padding: 2px 6px;
}

main a:hover {
    text-decoration: underline;
    color: var(--cor4);
}

/*
Quando a gente pega o código de um vídeo no Youtube, a gente já pega o código pronto. Ele é um "iframe" que já vem com largura e altura definidas. Então isso limita muito. 
Existe uma gambiarra para poder colocar o vídeo do youtube já centralizado. Isso é necessário porque qualquer incorporação de vídeo que o Youtube e vimeo dão são 
um pouco ruins. 
A primeira coisa que vamos fazer é envolopar o iframe dentro de uma <div> e da uma "class" pra ela.  

Depois vamos para o "style" e configurar tudo que é <div> da classe vídeo (div.video). Uma das configurações importantes é colocar o "position" como relative
na classe vídeo que ta dentro da div e o "padding-bottom" de  59%. O padding-bottom de 59% diminui as barras pretas laterais quando a gente da play no video. 
Isso varia de vídeo para vídeo, então tem que ir configurando e testando. 
*/

div.video {
    background-color: var(--cor5);
    margin: 0px -20px 30px -20px;
    padding: 20px;
    padding-bottom: 59%;
    position: relative;
}

/*
Primeiro criamos uma configuração pro vídeo, agora a segunda parta da gambiarra é criar uma configuração pro iframe que ta dentro da div da classe vídeo.
A configuração importante aqui é "position: absolute". Quando eu coloco a posição como "absolute" eu consigo mexer com top e left. 
Devemos configurar o top e left da posição "absolut". A gente vai colocando os valores e fazendo os testes. 
No "position: absolute;" eu consigo configurar, também o width e height. 
O width e o height de 90% significa que a largura e altura do vídeo vão ocupar 90% da div. 
*/

div.video > iframe {
    position: absolute;
    top: 5%;
    left: 5%;
    width: 90%;
    height: 90%;
}

/*
<aside> é uma tag para trabalhar conteúdos periféricos. Pode ser, por exemplo, uma curiosidade sobre o conteúdo que foi abordado 
*/

aside {
    background-color: var(--cor1);
    padding: 10px;
    border-radius: 10px;
    box-shadow: 3px 3px 8px rgba(0, 0, 0, 0.281);
}

aside h3 {
    background-color: var(--cor4); 
    /*
    Eu quero também que a coluna do h3 ocupe todo o espaço de cima e dos lados do "aside". Para isso, eu devo configurar a margem da esquerda como "-10px", a de cima como "-10px" e de baixo como 0px e a da direita como "-10px". 
    Dessa forma, as margens negativas quer dizer que eu estou tirando as margens. A borda vai crescer 10px onde eu coloquei negativo. 
    */
    margin: -10px -10px 0px -10px;
    border-radius: 10px 10px 0px 0px;
    padding: 10px; 
    color: white; 
}

/*
Apenas com as configurações acima, as bolinhas no site fica pra fora da caixa. Isso acontece porque a gente precisa configurar, também, o nosso "ul". 
*/

aside > ul {
    /*
    "list-style-position" (a posição da lista) serve para tirar as bolinhas que estáo saindo da caixa "aside". Eu configuro como "inside". O normal é "outside", 
    ou seja, a bolinha pro lado de fora. 
    */
    list-style-position: inside;
    /*
    A lista ficou muito comprida. Quero dividir em duas colunas. Para isso eu insiro o parâmetro "columns" e escolho a quantidade de colunas. 
    Tem que ter muito cuidado quando for colocar as colunas pensando na visualização em dispositivos móveis com tela pequena. Com 3 colunas, se for 
    visto em uma tela muito pequeno, a visualização fica desconfigurada. 
    */
    columns: 2;
    /*
    Para inserir o símbolo, eu posso, alternativamente, inserir o código do símbolo sem o "U+" no parâmetro "list-style-type" e colocar antes do código "\". 
    Com essa configuração, o símbolo ficou muito próximo dos números. Então foi colocado depois do código "\00A0". "00A0 ou "0020" é o espaço sem quebra. 
    Outra observação importante é que esse código "list-style-type: '\2714\00A0\00A0';" não é compatível com todo tipo d enavegador. 
    */
    list-style-type: '\2714\00A0\00A0';
}

footer {
    background-color: var(--cor5);
    color: white ;
    text-align: center;
    font-size: 0.8em;
    padding: 5px;
}

/*
Eu posso, também, escrever dessa forma: "footer > p > a {}". Será lido como todo link que tiver dentro do parágrafo que está dentro do footer. 
*/
footer a {
    color: white;
    font-weight: bolder;
    text-decoration: none;
}

footer a:hover {
    text-decoration: underline;
    color: var(--cor1);
}